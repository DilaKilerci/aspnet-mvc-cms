// <auto-generated />
using System;
using Cms.Data.EntityFramework.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Cms.Data.Migrations
{
    [DbContext(typeof(CmsContext))]
    [Migration("20240313190001_secondCheckIn")]
    partial class secondCheckIn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Cms.Entities.Concrete.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Admins", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2024, 3, 13, 22, 0, 0, 967, DateTimeKind.Local).AddTicks(2764),
                            Email = "admin@gmail.com",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedById = 1,
                            ModifiedDate = new DateTime(2024, 3, 13, 22, 0, 0, 967, DateTimeKind.Local).AddTicks(2765),
                            Name = "Admin",
                            Password = "Admin.123",
                            RoleId = 1,
                            Surname = "Admin"
                        });
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AppointmentDate")
                        .HasColumnType("datetime");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("WorkingHourId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("HospitalId");

                    b.HasIndex("UserId");

                    b.HasIndex("WorkingHourId");

                    b.ToTable("Appointments");

                    b.HasData(
                        new
                        {
                            Id = 7,
                            AppointmentDate = new DateTime(2024, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CategoryId = 6,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2024, 3, 13, 22, 0, 0, 967, DateTimeKind.Local).AddTicks(7627),
                            DoctorId = 9,
                            HospitalId = 5,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedById = 1,
                            ModifiedDate = new DateTime(2024, 3, 13, 22, 0, 0, 967, DateTimeKind.Local).AddTicks(7628),
                            UserId = 27,
                            WorkingHourId = 10
                        });
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Article", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(MAX)");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("DoctorId");

                    b.ToTable("Articles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 3,
                            CategoryId = 6,
                            Content = "Heart attack symptoms can vary widely between individuals, but commonly include chest pain or discomfort, often described as pressure, squeezing, or fullness. This pain may radiate to the arms, neck, jaw, back, or stomach. Other symptoms can include shortness of breath, nausea, lightheadedness, cold sweats, and fatigue. It's important to note that symptoms may be different for men and women, with women sometimes experiencing less typical symptoms such as unusual fatigue, sleep disturbances, or indigestion. Prompt recognition of heart attack symptoms is crucial for seeking immediate medical attention, as early intervention can greatly improve outcomes and prevent complications.",
                            CreatedById = 1,
                            CreatedDate = new DateTime(2024, 3, 13, 22, 0, 0, 968, DateTimeKind.Local).AddTicks(239),
                            DoctorId = 9,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedById = 1,
                            ModifiedDate = new DateTime(2024, 3, 13, 22, 0, 0, 968, DateTimeKind.Local).AddTicks(240),
                            Title = "Heart Attack Symptoms"
                        });
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Categories", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 6,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2024, 3, 13, 22, 0, 0, 968, DateTimeKind.Local).AddTicks(1251),
                            Description = "Heart Disease",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedById = 1,
                            ModifiedDate = new DateTime(2024, 3, 13, 22, 0, 0, 968, DateTimeKind.Local).AddTicks(1252),
                            Name = "Cardiology"
                        });
                });

            modelBuilder.Entity("Cms.Entities.Concrete.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Cities", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 58,
                            Name = "Sivas"
                        });
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ArticleId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ArticleId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("UserId");

                    b.ToTable("Comments", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            ArticleId = 3,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2024, 3, 13, 22, 0, 0, 968, DateTimeKind.Local).AddTicks(4699),
                            DoctorId = 9,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedById = 1,
                            ModifiedDate = new DateTime(2024, 3, 13, 22, 0, 0, 968, DateTimeKind.Local).AddTicks(4700),
                            Text = "Test comment.",
                            UserId = 27
                        });
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Doctor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("HospitalId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CitizenId")
                        .IsUnique();

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("HospitalId");

                    b.HasIndex("RoleId");

                    b.ToTable("Doctors", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 9,
                            CategoryId = 6,
                            CitizenId = "11111111111",
                            CityId = 58,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2024, 3, 13, 22, 0, 0, 969, DateTimeKind.Local).AddTicks(1035),
                            DateOfBirth = new DateTime(1987, 5, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "doctor@gmail.com",
                            HospitalId = 5,
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedById = 1,
                            ModifiedDate = new DateTime(2024, 3, 13, 22, 0, 0, 969, DateTimeKind.Local).AddTicks(1036),
                            Name = "Doctor",
                            Password = "Doctor.123",
                            Phone = "5552223344",
                            Picture = "https://as1.ftcdn.net/v2/jpg/01/62/59/04/1000_F_162590462_StuNG5boff6MVrZOCmbnDv8HPNfITqZl.jpg",
                            RoleId = 2,
                            Surname = "Doctor"
                        });
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Hospital", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Hospitals", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 5,
                            CityId = 58,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2024, 3, 13, 22, 0, 0, 969, DateTimeKind.Local).AddTicks(2763),
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedById = 1,
                            ModifiedDate = new DateTime(2024, 3, 13, 22, 0, 0, 969, DateTimeKind.Local).AddTicks(2764),
                            Name = "Test Hospital"
                        });
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2024, 3, 13, 22, 0, 0, 969, DateTimeKind.Local).AddTicks(3775),
                            Description = "Full access",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedById = 1,
                            ModifiedDate = new DateTime(2024, 3, 13, 22, 0, 0, 969, DateTimeKind.Local).AddTicks(3775),
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2024, 3, 13, 22, 0, 0, 969, DateTimeKind.Local).AddTicks(3778),
                            Description = "Semi access",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedById = 1,
                            ModifiedDate = new DateTime(2024, 3, 13, 22, 0, 0, 969, DateTimeKind.Local).AddTicks(3779),
                            Name = "Doctor"
                        },
                        new
                        {
                            Id = 3,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2024, 3, 13, 22, 0, 0, 969, DateTimeKind.Local).AddTicks(3781),
                            Description = "Usage only",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedById = 1,
                            ModifiedDate = new DateTime(2024, 3, 13, 22, 0, 0, 969, DateTimeKind.Local).AddTicks(3782),
                            Name = "User"
                        });
                });

            modelBuilder.Entity("Cms.Entities.Concrete.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CitizenId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<int>("CreatedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("ModifiedById")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CitizenId")
                        .IsUnique();

                    b.HasIndex("CityId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 27,
                            CitizenId = "12222222222",
                            CityId = 58,
                            CreatedById = 1,
                            CreatedDate = new DateTime(2024, 3, 13, 22, 0, 0, 969, DateTimeKind.Local).AddTicks(7697),
                            DateOfBirth = new DateTime(1990, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "user@gmail.com",
                            IsActive = true,
                            IsDeleted = false,
                            ModifiedById = 1,
                            ModifiedDate = new DateTime(2024, 3, 13, 22, 0, 0, 969, DateTimeKind.Local).AddTicks(7698),
                            Name = "User",
                            Password = "User.123",
                            Phone = "5552223344",
                            RoleId = 3,
                            Surname = "User"
                        });
                });

            modelBuilder.Entity("Cms.Entities.Concrete.WorkingHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AppointmentTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DoctorId");

                    b.ToTable("WorkingHours", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AppointmentTime = "09:00",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 2,
                            AppointmentTime = "09:30",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 3,
                            AppointmentTime = "10:00",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 4,
                            AppointmentTime = "10:30",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 5,
                            AppointmentTime = "11:00",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 6,
                            AppointmentTime = "11:30",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 7,
                            AppointmentTime = "13:00",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 8,
                            AppointmentTime = "13:30",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 9,
                            AppointmentTime = "14:00",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 10,
                            AppointmentTime = "14:30",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 11,
                            AppointmentTime = "15:00",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 12,
                            AppointmentTime = "15:30",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 13,
                            AppointmentTime = "16:00",
                            DoctorId = 9
                        },
                        new
                        {
                            Id = 14,
                            AppointmentTime = "16:30",
                            DoctorId = 9
                        });
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Admin", b =>
                {
                    b.HasOne("Cms.Entities.Concrete.Role", "Role")
                        .WithMany("Admins")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Appointment", b =>
                {
                    b.HasOne("Cms.Entities.Concrete.Category", "Category")
                        .WithMany("Appointments")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Entities.Concrete.Doctor", "Doctor")
                        .WithMany("Appointments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Entities.Concrete.Hospital", "Hospital")
                        .WithMany("Appointments")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Entities.Concrete.User", "User")
                        .WithMany("Appointments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Entities.Concrete.WorkingHour", "WorkingHour")
                        .WithMany("Appointments")
                        .HasForeignKey("WorkingHourId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Doctor");

                    b.Navigation("Hospital");

                    b.Navigation("User");

                    b.Navigation("WorkingHour");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Article", b =>
                {
                    b.HasOne("Cms.Entities.Concrete.Category", "Category")
                        .WithMany("Articles")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Entities.Concrete.Doctor", "Doctor")
                        .WithMany("Articles")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("Cms.Entities.Concrete.Article", "Article")
                        .WithMany("Comments")
                        .HasForeignKey("ArticleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Entities.Concrete.Doctor", "Doctor")
                        .WithMany("Comments")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Entities.Concrete.User", "User")
                        .WithMany("Comments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Article");

                    b.Navigation("Doctor");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Doctor", b =>
                {
                    b.HasOne("Cms.Entities.Concrete.Category", "Category")
                        .WithMany("Doctors")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Entities.Concrete.City", "City")
                        .WithMany("Doctors")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Entities.Concrete.Hospital", "Hospital")
                        .WithMany("Doctors")
                        .HasForeignKey("HospitalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Entities.Concrete.Role", "Role")
                        .WithMany("Doctors")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("City");

                    b.Navigation("Hospital");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Hospital", b =>
                {
                    b.HasOne("Cms.Entities.Concrete.City", "City")
                        .WithMany("Hospitals")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.User", b =>
                {
                    b.HasOne("Cms.Entities.Concrete.City", "City")
                        .WithMany("Users")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Cms.Entities.Concrete.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.WorkingHour", b =>
                {
                    b.HasOne("Cms.Entities.Concrete.Doctor", "Doctor")
                        .WithMany("WorkingHours")
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Doctor");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Article", b =>
                {
                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Category", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articles");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.City", b =>
                {
                    b.Navigation("Doctors");

                    b.Navigation("Hospitals");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Doctor", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Articles");

                    b.Navigation("Comments");

                    b.Navigation("WorkingHours");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Hospital", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Doctors");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.Role", b =>
                {
                    b.Navigation("Admins");

                    b.Navigation("Doctors");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.User", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("Comments");
                });

            modelBuilder.Entity("Cms.Entities.Concrete.WorkingHour", b =>
                {
                    b.Navigation("Appointments");
                });
#pragma warning restore 612, 618
        }
    }
}
